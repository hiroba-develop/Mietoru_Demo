openapi: 3.0.3
info:
  title: ミエトル API
  description: 経営が見える、成長が実感できる事業管理アプリケーション
  version: 1.0.0
  contact:
    name: ミエトル サポート
    email: support@mietoru.com

paths:
  # 認証関連 (Login.tsx)
  /auth/login:
    post:
      tags:
        - 認証
      summary: メールアドレスとパスワードでログイン
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        "200":
          description: ログイン成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: 認証失敗
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/google:
    post:
      tags:
        - 認証
      summary: Googleアカウントでログイン
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: Google OAuth トークン
                  example: "dummy-google-token"
      responses:
        "200":
          description: ログイン成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: 認証失敗
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/password/reset:
    post:
      tags:
        - 認証
      summary: パスワード再設定
      description: ユーザーIDを指定してパスワードを更新します
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - newPassword
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
                newPassword:
                  type: string
                  format: password
                  minLength: 8
                  example: "newpassword123"
                  description: "新しいパスワード（8文字以上、英数字含む）"
                  pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              newPassword: "newpassword123"
      responses:
        "200":
          description: パスワード更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "パスワードが正常に更新されました"
                  userId:
                    type: string
                    example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        "400":
          description: 入力値エラー（パスワード要件不満など）
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ユーザーが見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: サーバー内部エラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/me:
    post:
      tags:
        - 認証
      summary: 現在のユーザー情報を取得
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
      responses:
        "200":
          description: ユーザー情報取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ユーザーが見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # 初期設定 (Setup.tsx)
  /setup:
    post:
      tags:
        - 初期設定
      summary: 初期設定作成・更新
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InitialSetup"
            example:
                userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                name: "田中太郎"
                phoneNumber: "090-1234-5678"
                companyName: "株式会社サンプル"
                companySize: 2
                industry: 1
                fiscalYearStartMonth: 4
                employeeCount: 3
                totalAssets: 5000000
                businessExperience: 3
                financialKnowledge: 2
      responses:
        "200":
          description: 初期設定完了
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: 不正なリクエスト（入力値エラー、必須項目不足など）
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # ダッシュボード (Dashboard.tsx)
  /dashboard:
    post:
      tags:
        - ダッシュボード
      summary: ダッシュボードデータ取得
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
                period:
                  type: string
                  enum: [current_month, last_3_months, last_6_months, last_12_months]
                  default: current_month
                  description: "データ取得期間"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              period: "current_month"
      responses:
        "200":
          description: ダッシュボードデータ取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardData"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ユーザーが見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # タスク管理 (Dashboard.tsx)
  /tasks:
    post:
      tags:
        - タスク管理
      summary: タスク一覧取得
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
                enabled:
                  type: boolean
                  description: "有効/無効フィルター"
                completed:
                  type: boolean
                  description: "完了/未完了フィルター"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              enabled: true
      responses:
        "200":
          description: タスク一覧取得成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ユーザーが見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /tasks/create:
    post:
      tags:
        - タスク管理
      summary: タスク作成
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  required:
                    - userId
                  properties:
                    userId:
                      type: string
                      maxLength: 36
                      example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                      description: "対象ユーザーのID（UUID形式）"
                - $ref: "#/components/schemas/TaskCreate"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              name: "月次売上の確認と入力"
              day: 5
              enabled: true
      responses:
        "201":
          description: タスク作成成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          description: 入力値エラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /tasks/update:
    post:
      tags:
        - タスク管理
      summary: タスク更新
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  required:
                    - userId
                    - taskId
                  properties:
                    userId:
                      type: string
                      maxLength: 36
                      example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                      description: "対象ユーザーのID（UUID形式）"
                    taskId:
                      type: integer
                      example: 1
                      description: "更新対象のタスクID"
                - $ref: "#/components/schemas/TaskUpdate"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              taskId: 1
              name: "月次売上の確認と入力（更新）"
              enabled: true
              completed: false
      responses:
        "200":
          description: タスク更新成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          description: 入力値エラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: タスクが見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /tasks/delete:
    post:
      tags:
        - タスク管理
      summary: タスク削除
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - taskId
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
                taskId:
                  type: integer
                  example: 1
                  description: "削除対象のタスクID"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              taskId: 1
      responses:
        "200":
          description: タスク削除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "タスクが削除されました"
                  taskId:
                    type: integer
                    example: 1
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: タスクが見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # 予実管理 (BudgetActual.tsx)
  /budget-actual:
    post:
      tags:
        - 予実管理
      summary: 予実月次データ取得
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
                year:
                  type: integer
                  minimum: 2020
                  maximum: 2030
                  example: 2024
                  description: "データ取得年度"
                period:
                  type: integer
                  enum: [6, 12]
                  default: 12
                  example: 12
                  description: "データ取得期間（月数）"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              year: 2024
              period: 12
      responses:
        "200":
          description: 予実月次データ取得成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MonthlyData"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ユーザーまたはデータが見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /budget-actual/actual:
    post:
      tags:
        - 予実管理
      summary: 実績データ保存
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - actualData
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
                actualData:
                  $ref: "#/components/schemas/ActualData"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              actualData:
                year: 2024
                month: 3
                revenue: 4800000
                expenses: 2800000
                netIncome: 2000000
      responses:
        "200":
          description: 実績データ保存成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "実績データが保存されました"
                  data:
                    $ref: "#/components/schemas/ActualData"
        "400":
          description: 入力値エラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /budget-actual/targets:
    post:
      tags:
        - 予実管理
      summary: 目標更新
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - monthlyData
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
                monthlyData:
                  type: array
                  items:
                    $ref: "#/components/schemas/MonthlyData"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              monthlyData:
                - year: 2024
                  month: 1
                  targetRevenue: 5000000
                  targetExpenses: 3000000
                - year: 2024
                  month: 2
                  targetRevenue: 5200000
                  targetExpenses: 3100000
      responses:
        "200":
          description: 目標更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "目標が更新されました"
                  updatedCount:
                    type: integer
                    example: 2
        "400":
          description: 入力値エラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /budget-actual/export:
    post:
      tags:
        - 予実管理
      summary: データエクスポート
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - format
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
                format:
                  type: string
                  enum: [csv, excel]
                  example: csv
                  description: "エクスポート形式"
                year:
                  type: integer
                  minimum: 2020
                  maximum: 2030
                  example: 2024
                  description: "エクスポート対象年度"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              format: "csv"
              year: 2024
      responses:
        "200":
          description: データエクスポート成功
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          description: 入力値エラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /budget-actual/csv-upload:
    post:
      tags:
        - 予実管理
      summary: CSVファイルアップロード
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - userId
                - file
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
                file:
                  type: string
                  format: binary
                  description: "アップロードするCSVファイル"
      responses:
        "200":
          description: CSVアップロード成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "CSVファイルが正常にアップロードされました"
                  importedCount:
                    type: integer
                    example: 12
                    description: "インポートされたレコード数"
        "400":
          description: ファイル形式エラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # ロードマップ (Roadmap.tsx)
  /roadmap:
    post:
      tags:
        - ロードマップ
      summary: ロードマップデータ取得
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
                period:
                  type: integer
                  enum: [3, 5, 10]
                  default: 5
                  example: 5
                  description: "ロードマップ期間（年数）"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              period: 5
      responses:
        "200":
          description: ロードマップデータ取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoadmapData"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ユーザーが見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /roadmap/targets:
    post:
      tags:
        - ロードマップ
      summary: 年次目標更新
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - targets
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
                targets:
                  type: array
                  items:
                    $ref: "#/components/schemas/YearlyTarget"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              targets:
                - year: 2024
                  targetRevenue: 60000000
                  targetNetWorth: 10000000
                - year: 2025
                  targetRevenue: 72000000
                  targetNetWorth: 15000000
      responses:
        "200":
          description: 年次目標更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "年次目標が更新されました"
                  updatedTargets:
                    type: array
                    items:
                      $ref: "#/components/schemas/YearlyTarget"
        "400":
          description: 入力値エラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /roadmap/recalculate:
    post:
      tags:
        - ロードマップ
      summary: ロードマップ再計算
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
                baseYear:
                  type: integer
                  minimum: 2020
                  maximum: 2030
                  example: 2024
                  description: "基準年（最新実績年）"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              baseYear: 2024
      responses:
        "200":
          description: ロードマップ再計算成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "ロードマップが再計算されました"
                  roadmapData:
                    $ref: "#/components/schemas/RoadmapData"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ユーザーまたはベースデータが見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # ランキング・表彰 (Ranking.tsx)
  /ranking:
    post:
      tags:
        - ランキング・表彰
      summary: 全体ランキング取得
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  enum:
                    [
                      overall,
                      industry,
                      size,
                      revenue,
                      profit,
                      net_worth,
                      target,
                    ]
                  default: overall
                  example: overall
                  description: "ランキングカテゴリ"
                limit:
                  type: integer
                  minimum: 1
                  maximum: 100
                  default: 10
                  example: 10
                  description: "取得件数"
                industry:
                  type: string
                  description: "業界フィルター"
                companySize:
                  type: string
                  description: "会社規模フィルター"
            example:
              category: "overall"
              limit: 10
      responses:
        "200":
          description: 全体ランキング取得成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CompanyRanking"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /ranking/user:
    post:
      tags:
        - ランキング・表彰
      summary: ユーザーランキング取得
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
                category:
                  type: string
                  enum:
                    [
                      overall,
                      industry,
                      size,
                      revenue,
                      profit,
                      net_worth,
                      target,
                    ]
                  default: overall
                  example: overall
                  description: "ランキングカテゴリ"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              category: "overall"
      responses:
        "200":
          description: ユーザーランキング取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRankingData"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ユーザーが見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /ranking/benchmark:
    post:
      tags:
        - ランキング・表彰
      summary: ベンチマークデータ取得
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
                category:
                  type: string
                  enum:
                    [
                      overall,
                      industry,
                      size,
                      revenue,
                      profit,
                      net_worth,
                      target,
                    ]
                  default: overall
                  example: overall
                  description: "ベンチマークカテゴリ"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              category: "industry"
      responses:
        "200":
          description: ベンチマークデータ取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BenchmarkData"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ユーザーが見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # 設定 (Settings.tsx)
  /settings/display:
    post:
      tags:
        - 設定
      summary: 設定画面表示情報取得
      description: 設定画面で表示するための全ての情報を取得します
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
      responses:
        "200":
          description: 設定画面表示情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettingsDisplayInfo"
        "400":
          description: 入力値エラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ユーザーが見つからない
          content:
            application/json:
              schema:
                 $ref: "#/components/schemas/Error"

  /settings/update:
    post:
      tags:
        - 設定
      summary: 設定情報更新
      description: 設定画面の全ての情報を更新します
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SettingsUpdateRequest"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              name: "田中太郎"
              email: "user@example.com"
              phoneNumber: "090-1234-5678"
              companyName: "株式会社サンプル"
              companySize: 2
              industry: 1
              fiscalYearStartMonth: 4
              totalAssets: 6000000
              businessExperience: 3
              financialKnowledge: 2
              emailNotification: true
              browserNotification: false
              tasks:
                - taskId: 1
                  notificationEnabled: true
                  notificationDay: 5
                - taskId: 2
                  notificationEnabled: false
                  notificationDay: 10
      responses:
        "200":
          description: 設定更新完了
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "設定が正常に更新されました"
                  updatedUser:
                    $ref: "#/components/schemas/User"
        "400":
          description: 入力値エラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ユーザーまたはタスクが見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"



  # 外部連携 (BudgetActual.tsx, Settings.tsx)
  /integrations/yayoi/import:
    post:
      tags:
        - 外部連携
      summary: 弥生会計データインポート
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
                dateRange:
                  type: object
                  properties:
                    startDate:
                      type: string
                      format: date
                      example: "2024-01-01"
                    endDate:
                      type: string
                      format: date
                      example: "2024-03-31"
                  description: "インポート対象期間"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              dateRange:
                startDate: "2024-01-01"
                endDate: "2024-03-31"
      responses:
        "200":
          description: データインポート成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "弥生会計からデータをインポートしました"
                  importedRecords:
                    type: integer
                    example: 45
                    description: "インポートされたレコード数"
                  summary:
                    type: object
                    properties:
                      revenue:
                        type: integer
                        example: 15000000
                      expenses:
                        type: integer
                        example: 9000000
        "400":
          description: 連携設定エラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /integrations/yayoi/settings:
    post:
      tags:
        - 外部連携
      summary: 弥生会計連携設定更新
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - settings
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
                settings:
                  $ref: "#/components/schemas/YayoiSettings"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              settings:
                enabled: true
                autoImport: true
                apiKey: "yayoi_api_key_example"
                accountMapping:
                  revenue: "4000"
                  expenses: "5000"
      responses:
        "200":
          description: 連携設定更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "弥生会計連携設定が更新されました"
                  settings:
                    $ref: "#/components/schemas/YayoiSettings"
        "400":
          description: 設定値エラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # サポート・相談 (Support.tsx)
  /support/faq:
    post:
      tags:
        - サポート・相談
      summary: よくある質問取得
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  enum: [general, accounting, tax, system]
                  description: "FAQカテゴリ"
                keyword:
                  type: string
                  description: "検索キーワード"
            example:
              category: "accounting"
              keyword: "経費"
      responses:
        "200":
          description: FAQ一覧取得成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FAQ"

  /support/consultation:
    post:
      tags:
        - サポート・相談
      summary: 税理士相談予約
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - consultationRequest
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
                consultationRequest:
                  $ref: "#/components/schemas/ConsultationRequest"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              consultationRequest:
                subject: "決算書の作成について"
                description: "初回決算書の作成方法を教えてほしい"
                preferredDateTime: "2024-04-15T10:00:00Z"
                consultationType: "video"
      responses:
        "201":
          description: 税理士相談予約成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Consultation"
        "400":
          description: 入力値エラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /support/consultation/history:
    post:
      tags:
        - サポート・相談
      summary: 相談履歴取得
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
                limit:
                  type: integer
                  minimum: 1
                  maximum: 100
                  default: 10
                  example: 10
                  description: "取得件数"
                status:
                  type: string
                  enum: [pending, confirmed, completed, cancelled]
                  description: "相談ステータスフィルター"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              limit: 10
              status: "completed"
      responses:
        "200":
          description: 相談履歴取得成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Consultation"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ユーザーが見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /support/chat:
    post:
      tags:
        - サポート・相談
      summary: チャットメッセージ送信
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - message
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
                message:
                  type: string
                  maxLength: 1000
                  example: "経費の計上方法について教えてください"
                  description: "チャットメッセージ内容"
                chatSessionId:
                  type: string
                  example: "chat_session_123"
                  description: "チャットセッションID"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              message: "経費の計上方法について教えてください"
              chatSessionId: "chat_session_123"
      responses:
        "200":
          description: メッセージ送信成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    type: string
                    example: "msg_456789"
                    description: "送信されたメッセージのID"
                  status:
                    type: string
                    example: "sent"
                    description: "送信ステータス"
                  response:
                    type: string
                    example: "経費の計上については、事業に関連する支出のみが対象となります..."
                    description: "AI応答メッセージ"
        "400":
          description: 入力値エラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # KPI (Dashboard.tsx)
  /kpi:
    post:
      tags:
        - KPI
      summary: KPIデータ取得
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  maxLength: 36
                  example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  description: "対象ユーザーのID（UUID形式）"
                period:
                  type: string
                  enum: [monthly, quarterly, yearly]
                  default: monthly
                  example: monthly
                  description: "データ集計期間"
                year:
                  type: integer
                  minimum: 2020
                  maximum: 2030
                  example: 2024
                  description: "データ取得年度"
                kpiTypes:
                  type: array
                  items:
                    type: string
                    enum: [revenue, profit, expenses, net_worth, growth_rate]
                  example: ["revenue", "profit", "growth_rate"]
                  description: "取得するKPI種別"
            example:
              userId: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              period: "monthly"
              year: 2024
              kpiTypes: ["revenue", "profit", "growth_rate"]
      responses:
        "200":
          description: KPIデータ取得成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/KPIData"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ユーザーまたはデータが見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object

    UserBasicInfo:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          example: "田中太郎"
          description: "ユーザー名"
        email:
          type: string
          format: email
          maxLength: 255
          example: "user@example.com"
          description: "メールアドレス"
        phoneNumber:
          type: string
          maxLength: 20
          example: "090-1234-5678"
          description: "電話番号"
        companyName:
          type: string
          maxLength: 200
          example: "株式会社サンプル"
          description: "会社名"
        companySize:
          type: integer
          example: 2
          description: "企業規模 (1:個人事業主, 2:法人1-5名, 3:法人6-20名, 4:法人21名以上)"
          minimum: 1
          maximum: 4
        industry:
          type: integer
          example: 1
          description: "業界 (1:IT・ソフトウェア, 2:製造業, 3:小売業, 4:飲食業, 5:サービス業, 6:建設業, 7:医療・福祉, 8:教育, 9:金融・保険, 10:不動産, 11:その他)"
          minimum: 1
          maximum: 11
        fiscalYearStartMonth:
          type: integer
          minimum: 1
          maximum: 12
          example: 4
          description: "事業年度開始月"
        employeeCount:
          type: integer
          minimum: 0
          example: 5
          description: "従業員数"
        totalAssets:
          type: integer
          minimum: 0
          example: 5000000
          description: "総資産（円）"
        businessExperience:
          type: integer
          example: 3
          description: "事業経験年数 (1:1年未満, 2:1-3年, 3:3-5年, 4:5-10年, 5:10年以上)"
          minimum: 1
          maximum: 5
        financialKnowledge:
          type: integer
          example: 2
          description: "財務・会計の知識レベル (1:初心者, 2:基本レベル, 3:中級レベル, 4:上級レベル)"
          minimum: 1
          maximum: 4

    User:
      allOf:
        - $ref: "#/components/schemas/UserBasicInfo"
        - type: object
          properties:
            id:
              type: string
              maxLength: 36
              example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              description: "ユーザーID（UUID形式）"
            isSetupComplete:
              type: string
              enum: ["0", "1"]
              example: "1"
              description: "初期設定完了フラグ（0:未完了, 1:完了）"
            isDeleted:
              type: string
              enum: ["0", "1"]
              example: "0"
              description: "削除フラグ（0:有効, 1:削除済み）"
            createdAt:
              type: string
              format: date-time
              example: "2024-01-15T09:30:00Z"
              description: "作成日時"
            updatedAt:
              type: string
              format: date-time
              example: "2024-06-01T14:25:00Z"
              description: "更新日時"

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: "JWT トークン"
        user:
          $ref: "#/components/schemas/User"
      example:
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          id: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
          email: "user@example.com"
          name: "田中太郎"
          companyName: "株式会社サンプル"
          phoneNumber: "090-1234-5678"
          isSetupComplete: "1"
          isDeleted: "0"
          createdAt: "2024-01-15T09:30:00Z"
          updatedAt: "2024-06-01T14:25:00Z"

    InitialSetup:
      allOf:
        - type: object
          required:
            - userId
          properties:
            userId:
              type: string
              maxLength: 36
              example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              description: "対象ユーザーのID（UUID形式）"
        - $ref: "#/components/schemas/UserBasicInfo"

    LongTermGoal:
      type: object
      properties:
        targetYear:
          type: integer
          example: 2034
        targetNetWorth:
          type: integer
          example: 50000000
        description:
          type: string
          example: "10年で純資産5000万円を達成する"

    RankingSettings:
      type: object
      properties:
        isParticipating:
          type: boolean
          example: true
        isAnonymous:
          type: boolean
          example: false
        allowBenchmarking:
          type: boolean
          example: true
        notificationEnabled:
          type: boolean
          example: true

    DashboardData:
      type: object
      properties:
        kpiData:
          type: array
          items:
            $ref: "#/components/schemas/KPIData"
        monthlyProgress:
          type: array
          items:
            $ref: "#/components/schemas/MonthlyProgress"
        currentMonthProfit:
          type: integer
        currentMonthProfitTarget:
          type: integer
        profitAchievementRate:
          type: number
          format: float
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/Task"
        yearlyGuides:
          type: array
          items:
            $ref: "#/components/schemas/YearlyGuide"

    KPIData:
      type: object
      properties:
        title:
          type: string
          example: "2024年06月の売上"
        value:
          type: string
          example: "2,350,000"
        change:
          type: string
          example: "+12.5%"
        trend:
          type: string
          enum: [up, down, stable]
        color:
          type: string
          example: "text-success"

    MonthlyProgress:
      type: object
      properties:
        month:
          type: integer
        year:
          type: integer
        phase:
          type: string
        phaseColor:
          type: string
        targetNetWorth:
          type: integer
        actualNetWorth:
          type: integer
        isCompleted:
          type: boolean
        isCurrent:
          type: boolean

    YearlyGuide:
      type: object
      properties:
        year:
          type: integer
        milestones:
          type: array
          items:
            type: string
        todoList:
          type: array
          items:
            type: string

    Task:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: "月次売上の確認と入力"
        day:
          type: integer
          minimum: 1
          maximum: 31
          example: 5
        enabled:
          type: boolean
          example: true
        completed:
          type: boolean
          example: false

    TaskCreate:
      type: object
      required:
        - name
        - day
      properties:
        name:
          type: string
          example: "月次売上の確認と入力"
        day:
          type: integer
          minimum: 1
          maximum: 31
          example: 5
        enabled:
          type: boolean
          default: true

    TaskUpdate:
      type: object
      properties:
        name:
          type: string
        day:
          type: integer
          minimum: 1
          maximum: 31
        enabled:
          type: boolean
        completed:
          type: boolean

    MonthlyData:
      type: object
      properties:
        id:
          type: integer
        month:
          type: string
          example: "4月"
        target:
          type: integer
          example: 2000000
        actual:
          type: integer
          example: 1850000
        profit:
          type: integer
          example: 370000
        profitTarget:
          type: integer
          example: 400000

    ActualData:
      type: object
      required:
        - year
        - month
        - revenue
        - profit
      properties:
        year:
          type: integer
          example: 2024
        month:
          type: integer
          minimum: 1
          maximum: 12
          example: 6
        revenue:
          type: integer
          example: 2350000
        profit:
          type: integer
          example: 485000

    RoadmapData:
      type: object
      properties:
        yearlyProgress:
          type: number
          format: float
          example: 25.0
        tenYearProgress:
          type: number
          format: float
          example: 10.0
        targets:
          type: array
          items:
            $ref: "#/components/schemas/YearlyTarget"
        phases:
          type: array
          items:
            $ref: "#/components/schemas/Phase"

    YearlyTarget:
      type: object
      properties:
        year:
          type: integer
          example: 1
        netWorth:
          type: integer
          example: 5000000
        revenue:
          type: integer
          example: 10000000
        profit:
          type: integer
          example: 2000000
        employees:
          type: integer
          example: 1
        phase:
          type: string
          example: "創業期"

    Phase:
      type: object
      properties:
        name:
          type: string
          example: "創業期"
        years:
          type: string
          example: "1年目〜3年目"
        profitTarget:
          type: string
          example: "200万円/年"

    CompanyRanking:
      type: object
      properties:
        id:
          type: string
        rank:
          type: integer
        companyName:
          type: string
        isAnonymous:
          type: boolean
        industry:
          type: string
        companySize:
          type: string
        foundingYear:
          type: integer
        totalScore:
          type: number
          format: float
        netWorthFormationRate:
          type: number
          format: float
        revenueGrowthRate:
          type: number
          format: float
        profitMarginImprovement:
          type: number
          format: float
        targetAchievementRate:
          type: number
          format: float

    UserRankingData:
      type: object
      properties:
        currentRank:
          type: integer
        totalParticipants:
          type: integer
        totalScore:
          type: number
          format: float
        scoreBreakdown:
          $ref: "#/components/schemas/ScoreBreakdown"
        categoryRankings:
          type: array
          items:
            $ref: "#/components/schemas/CategoryRanking"
        earnedBadges:
          type: array
          items:
            $ref: "#/components/schemas/Badge"
        recentAwards:
          type: array
          items:
            $ref: "#/components/schemas/Award"
        benchmarkData:
          $ref: "#/components/schemas/BenchmarkData"

    ScoreBreakdown:
      type: object
      properties:
        netWorthFormationRate:
          type: number
          format: float
        revenueGrowthRate:
          type: number
          format: float
        profitMarginImprovement:
          type: number
          format: float
        targetAchievementRate:
          type: number
          format: float

    CategoryRanking:
      type: object
      properties:
        category:
          type: string
        rank:
          type: integer
        totalParticipants:
          type: integer

    Badge:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: string
        rarity:
          type: string
          enum: [common, rare, epic, legendary]
        unlockedAt:
          type: string
          format: date-time

    Award:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        category:
          type: string
        period:
          type: string
        year:
          type: integer
        month:
          type: integer
        rank:
          type: integer
        companyId:
          type: string
        isAnonymous:
          type: boolean

    BenchmarkData:
      type: object
      properties:
        industry:
          type: string
        companySize:
          type: string
        averageScore:
          type: number
          format: float
        medianScore:
          type: number
          format: float
        topPercentileScore:
          type: number
          format: float
        averageRevenueGrowth:
          type: number
          format: float
        averageProfitMargin:
          type: number
          format: float
        averageNetWorthFormation:
          type: number
          format: float
        averageTargetAchievement:
          type: number
          format: float
        participantCount:
          type: integer

    SettingsDisplayInfo:
      allOf:
        - $ref: "#/components/schemas/UserBasicInfo"
        - type: object
          properties:
            # 通知設定
            emailNotification:
              type: boolean
              example: true
              description: "メール通知"
            browserNotification:
              type: boolean
              example: true
              description: "ブラウザ通知"
            
            # タスク設定
            tasks:
              type: array
              items:
                $ref: "#/components/schemas/TaskDisplayInfo"
              description: "タスク一覧"
          example:
            name: "田中太郎"
            email: "user@example.com"
            phoneNumber: "090-1234-5678"
            companyName: "株式会社サンプル"
            companySize: 2
            industry: 1
            fiscalYearStartMonth: 4
            totalAssets: 5000000
            businessExperience: 3
            financialKnowledge: 2
            emailNotification: true
            browserNotification: false
            tasks:
              - taskId: 1
                taskName: "月次売上の確認と入力"
                notificationEnabled: true
                notificationDay: 5
              - taskId: 2
                taskName: "月次経費の確認と入力"
                notificationEnabled: false
                notificationDay: 10

    TaskDisplayInfo:
      type: object
      properties:
        taskId:
          type: integer
          example: 1
          description: "タスクID"
        taskName:
          type: string
          example: "月次売上の確認と入力"
          description: "タスク名"
        notificationEnabled:
          type: boolean
          example: true
          description: "タスクの通知設定"
        notificationDay:
          type: integer
          minimum: 1
          maximum: 31
          example: 5
          description: "通知日"

    SettingsUpdateRequest:
      allOf:
        - type: object
          required:
            - userId
            - emailNotification
            - browserNotification
            - tasks
          properties:
            userId:
              type: string
              maxLength: 36
              example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
              description: "対象ユーザーのID（UUID形式）"
            emailNotification:
              type: boolean
              example: true
              description: "メール通知"
            browserNotification:
              type: boolean
              example: true
              description: "ブラウザ通知"
            tasks:
              type: array
              items:
                $ref: "#/components/schemas/TaskUpdateInfo"
              description: "タスク設定一覧"
        - $ref: "#/components/schemas/UserBasicInfo"

    TaskUpdateInfo:
      type: object
      required:
        - taskId
        - notificationEnabled
        - notificationDay
      properties:
        taskId:
          type: integer
          example: 1
          description: "タスクID"
        notificationEnabled:
          type: boolean
          example: true
          description: "タスクの通知設定"
        notificationDay:
          type: integer
          minimum: 1
          maximum: 31
          example: 5
          description: "通知日"

    UserSettings:
      type: object
      properties:
        userInfo:
          $ref: "#/components/schemas/UserBasicInfo"
        setupData:
          $ref: "#/components/schemas/InitialSetup"
        notificationSettings:
          $ref: "#/components/schemas/NotificationSettings"
        yayoiSettings:
          $ref: "#/components/schemas/YayoiSettings"
        rankingSettings:
          $ref: "#/components/schemas/RankingSettings"

    NotificationSettings:
      type: object
      properties:
        email:
          type: boolean
        browser:
          type: boolean
        mobile:
          type: boolean

    YayoiSettings:
      type: object
      properties:
        connected:
          type: boolean
        apiKey:
          type: string
        autoSync:
          type: boolean
        syncFrequency:
          type: string
          enum: [hourly, daily, weekly]

    FAQ:
      type: object
      properties:
        id:
          type: string
        question:
          type: string
        answer:
          type: string
        category:
          type: string

    ConsultationRequest:
      type: object
      required:
        - date
        - time
        - topic
      properties:
        date:
          type: string
          format: date
        time:
          type: string
          example: "10:00"
        topic:
          type: string
          example: "消費税の計算方法について"
        description:
          type: string

    Consultation:
      type: object
      properties:
        id:
          type: string
        date:
          type: string
          format: date
        time:
          type: string
        advisor:
          type: string
        topic:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [scheduled, completed, cancelled]
        createdAt:
          type: string
          format: date-time

tags:
  - name: 認証
    description: ユーザー認証関連の操作
  - name: 初期設定
    description: 初期設定関連の操作
  - name: ダッシュボード
    description: ダッシュボード表示用データの操作
  - name: タスク管理
    description: 月次タスクの管理操作
  - name: 予実管理
    description: 予算と実績の管理操作
  - name: ロードマップ
    description: 長期目標とロードマップの管理操作
  - name: ランキング・表彰
    description: ランキングと表彰システムの操作
  - name: 設定
    description: ユーザー設定の管理操作
  - name: 外部連携
    description: 外部システムとの連携操作
  - name: サポート・相談
    description: サポートと相談機能の操作
  - name: KPI
    description: KPI（重要業績評価指標）の操作
