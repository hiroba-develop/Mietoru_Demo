openapi: 3.0.3
info:
  title: ミエトル API
  description: 経営が見える、成長が実感できる事業管理アプリケーション
  version: 1.0.0
  contact:
    name: ミエトル サポート
    email: support@mietoru.com

paths:
  # 認証関連 (Login.tsx)
  /auth/login:
    post:
      tags:
        - 認証
      summary: メールアドレスとパスワードでログイン
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        "200":
          description: ログイン成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: 認証失敗
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/google:
    post:
      tags:
        - 認証
      summary: Googleアカウントでログイン
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: Google OAuth トークン
                  example: "dummy-google-token"
      responses:
        "200":
          description: ログイン成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: 認証失敗
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/me:
    post:
      tags:
        - 認証
      summary: 現在のユーザー情報を取得
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [get_user_info]
                  example: "get_user_info"
      responses:
        "200":
          description: ユーザー情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # 初期設定 (Setup.tsx)
  /setup:
    post:
      tags:
        - 初期設定
      summary: 初期設定操作
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum: [create, update]
                  example: "create"
                data:
                  $ref: "#/components/schemas/InitialSetup"
      responses:
        "200":
          description: 設定完了
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # ダッシュボード (Dashboard.tsx)
  /dashboard:
    post:
      tags:
        - ダッシュボード
      summary: ダッシュボードデータ取得
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [get_dashboard_data]
                  example: "get_dashboard_data"
      responses:
        "200":
          description: ダッシュボードデータ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardData"

  # タスク管理 (Dashboard.tsx)
  /tasks:
    post:
      tags:
        - タスク管理
      summary: タスク操作
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum: [get_list, create, update, delete]
                  example: "get_list"
                taskId:
                  type: integer
                  description: update、delete時に必要
                data:
                  oneOf:
                    - $ref: "#/components/schemas/TaskCreate"
                    - $ref: "#/components/schemas/TaskUpdate"
      responses:
        "200":
          description: タスク操作完了
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: "#/components/schemas/Task"
                  - $ref: "#/components/schemas/Task"
                  - type: object
                    properties:
                      message:
                        type: string
        "201":
          description: タスク作成完了
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "204":
          description: タスク削除完了

  # 予実管理 (BudgetActual.tsx)
  /budget-actual:
    post:
      tags:
        - 予実管理
      summary: 予実管理操作
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum: [get_monthly, save_actual, update_targets, export_data]
                  example: "get_monthly"
                year:
                  type: integer
                  example: 2024
                period:
                  type: integer
                  enum: [6, 12]
                  example: 12
                format:
                  type: string
                  enum: [csv, excel]
                  example: csv
                actualData:
                  $ref: "#/components/schemas/ActualData"
                monthlyData:
                  type: array
                  items:
                    $ref: "#/components/schemas/MonthlyData"
      responses:
        "200":
          description: 予実管理操作完了
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: "#/components/schemas/MonthlyData"
                  - $ref: "#/components/schemas/ActualData"
                  - type: object
                    properties:
                      message:
                        type: string
            application/octet-stream:
              schema:
                type: string
                format: binary

  /budget-actual/csv-upload:
    post:
      tags:
        - 予実管理
      summary: CSVファイルアップロード
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: CSVアップロード完了
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  importedCount:
                    type: integer

  # ロードマップ (Roadmap.tsx)
  /roadmap:
    post:
      tags:
        - ロードマップ
      summary: ロードマップ操作
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum: [get_data, update_targets, recalculate]
                  example: "get_data"
                targets:
                  type: array
                  items:
                    $ref: "#/components/schemas/YearlyTarget"
      responses:
        "200":
          description: ロードマップ操作完了
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RoadmapData"
                  - type: array
                    items:
                      $ref: "#/components/schemas/YearlyTarget"

  # ランキング・表彰 (Ranking.tsx)
  /ranking:
    post:
      tags:
        - ランキング・表彰
      summary: ランキング操作
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum: [get_ranking, get_user_ranking, get_benchmark]
                  example: "get_ranking"
                category:
                  type: string
                  enum:
                    [
                      overall,
                      industry,
                      size,
                      revenue,
                      profit,
                      net_worth,
                      target,
                    ]
                  example: overall
                limit:
                  type: integer
                  minimum: 1
                  maximum: 100
                  example: 10
                industry:
                  type: string
                companySize:
                  type: string
      responses:
        "200":
          description: ランキング操作完了
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: "#/components/schemas/CompanyRanking"
                  - $ref: "#/components/schemas/UserRankingData"
                  - $ref: "#/components/schemas/BenchmarkData"

  # 設定 (Settings.tsx)
  /settings:
    post:
      tags:
        - 設定
      summary: ユーザー設定操作
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum: [get_settings, update_settings]
                  example: "get_settings"
                data:
                  $ref: "#/components/schemas/UserSettings"
      responses:
        "200":
          description: 設定操作完了
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettings"

  # 外部連携 (BudgetActual.tsx, Settings.tsx)
  /integrations/yayoi:
    post:
      tags:
        - 外部連携
      summary: 弥生会計連携操作
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum: [import_data, update_settings]
                  example: "import_data"
                settings:
                  $ref: "#/components/schemas/YayoiSettings"
      responses:
        "200":
          description: 弥生会計連携操作完了
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  importedRecords:
                    type: integer

  # サポート・相談 (Support.tsx)
  /support/faq:
    post:
      tags:
        - サポート・相談
      summary: よくある質問取得
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [get_faq]
                  example: "get_faq"
      responses:
        "200":
          description: FAQ一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FAQ"

  /support/consultation:
    post:
      tags:
        - サポート・相談
      summary: 税理士相談操作
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum: [book_consultation, get_history]
                  example: "book_consultation"
                consultationRequest:
                  $ref: "#/components/schemas/ConsultationRequest"
      responses:
        "200":
          description: 相談操作完了
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Consultation"
                  - type: array
                    items:
                      $ref: "#/components/schemas/Consultation"
        "201":
          description: 予約完了
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Consultation"

  /support/chat:
    post:
      tags:
        - サポート・相談
      summary: チャットメッセージ送信
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  example: "経費の計上方法について教えてください"
      responses:
        "200":
          description: メッセージ送信完了
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    type: string
                  status:
                    type: string
                    example: "sent"

  # KPI (Dashboard.tsx)
  /kpi:
    post:
      tags:
        - KPI
      summary: KPIデータ取得
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [get_kpi_data]
                  example: "get_kpi_data"
                period:
                  type: string
                  enum: [monthly, yearly]
                  example: monthly
      responses:
        "200":
          description: KPIデータ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/KPIData"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object

    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        isSetupComplete:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT トークン
        user:
          $ref: "#/components/schemas/User"

    InitialSetup:
      type: object
      required:
        - currentAssets
        - companySize
        - industry
        - fiscalYearStartMonth
        - employeeCount
        - businessExperience
        - financialKnowledge
        - longTermGoal
        - rankingSettings
      properties:
        currentAssets:
          type: integer
          minimum: 0
          example: 5000000
        companySize:
          type: string
          enum:
            [
              "個人事業主",
              "法人（従業員1-5名）",
              "法人（従業員6-20名）",
              "法人（従業員21名以上）",
            ]
        companyName:
          type: string
          nullable: true
        industry:
          type: string
          enum:
            [
              "IT・ソフトウェア",
              "製造業",
              "小売業",
              "飲食業",
              "サービス業",
              "建設業",
              "医療・福祉",
              "教育",
              "金融・保険",
              "不動産",
              "その他",
            ]
        fiscalYearStartMonth:
          type: integer
          minimum: 1
          maximum: 12
          example: 4
        employeeCount:
          type: integer
          minimum: 1
          example: 1
        businessExperience:
          type: string
          enum: ["1年未満", "1-3年", "3-5年", "5-10年", "10年以上"]
        financialKnowledge:
          type: string
          enum: ["初心者", "基本レベル", "中級レベル", "上級レベル"]
        priorityGoals:
          type: array
          items:
            type: string
        longTermGoal:
          $ref: "#/components/schemas/LongTermGoal"
        rankingSettings:
          $ref: "#/components/schemas/RankingSettings"

    LongTermGoal:
      type: object
      properties:
        targetYear:
          type: integer
          example: 2034
        targetNetWorth:
          type: integer
          example: 50000000
        description:
          type: string
          example: "10年で純資産5000万円を達成する"

    RankingSettings:
      type: object
      properties:
        isParticipating:
          type: boolean
          example: true
        isAnonymous:
          type: boolean
          example: false
        allowBenchmarking:
          type: boolean
          example: true
        notificationEnabled:
          type: boolean
          example: true

    DashboardData:
      type: object
      properties:
        kpiData:
          type: array
          items:
            $ref: "#/components/schemas/KPIData"
        monthlyProgress:
          type: array
          items:
            $ref: "#/components/schemas/MonthlyProgress"
        currentMonthProfit:
          type: integer
        currentMonthProfitTarget:
          type: integer
        profitAchievementRate:
          type: number
          format: float
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/Task"
        yearlyGuides:
          type: array
          items:
            $ref: "#/components/schemas/YearlyGuide"

    KPIData:
      type: object
      properties:
        title:
          type: string
          example: "2024年06月の売上"
        value:
          type: string
          example: "2,350,000"
        change:
          type: string
          example: "+12.5%"
        trend:
          type: string
          enum: [up, down, stable]
        color:
          type: string
          example: "text-success"

    MonthlyProgress:
      type: object
      properties:
        month:
          type: integer
        year:
          type: integer
        phase:
          type: string
        phaseColor:
          type: string
        targetNetWorth:
          type: integer
        actualNetWorth:
          type: integer
        isCompleted:
          type: boolean
        isCurrent:
          type: boolean

    YearlyGuide:
      type: object
      properties:
        year:
          type: integer
        milestones:
          type: array
          items:
            type: string
        todoList:
          type: array
          items:
            type: string

    Task:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: "月次売上の確認と入力"
        day:
          type: integer
          minimum: 1
          maximum: 31
          example: 5
        enabled:
          type: boolean
          example: true
        completed:
          type: boolean
          example: false

    TaskCreate:
      type: object
      required:
        - name
        - day
      properties:
        name:
          type: string
          example: "月次売上の確認と入力"
        day:
          type: integer
          minimum: 1
          maximum: 31
          example: 5
        enabled:
          type: boolean
          default: true

    TaskUpdate:
      type: object
      properties:
        name:
          type: string
        day:
          type: integer
          minimum: 1
          maximum: 31
        enabled:
          type: boolean
        completed:
          type: boolean

    MonthlyData:
      type: object
      properties:
        id:
          type: integer
        month:
          type: string
          example: "4月"
        target:
          type: integer
          example: 2000000
        actual:
          type: integer
          example: 1850000
        profit:
          type: integer
          example: 370000
        profitTarget:
          type: integer
          example: 400000

    ActualData:
      type: object
      required:
        - year
        - month
        - revenue
        - profit
      properties:
        year:
          type: integer
          example: 2024
        month:
          type: integer
          minimum: 1
          maximum: 12
          example: 6
        revenue:
          type: integer
          example: 2350000
        profit:
          type: integer
          example: 485000

    RoadmapData:
      type: object
      properties:
        yearlyProgress:
          type: number
          format: float
          example: 25.0
        tenYearProgress:
          type: number
          format: float
          example: 10.0
        targets:
          type: array
          items:
            $ref: "#/components/schemas/YearlyTarget"
        phases:
          type: array
          items:
            $ref: "#/components/schemas/Phase"

    YearlyTarget:
      type: object
      properties:
        year:
          type: integer
          example: 1
        netWorth:
          type: integer
          example: 5000000
        revenue:
          type: integer
          example: 10000000
        profit:
          type: integer
          example: 2000000
        employees:
          type: integer
          example: 1
        phase:
          type: string
          example: "創業期"

    Phase:
      type: object
      properties:
        name:
          type: string
          example: "創業期"
        years:
          type: string
          example: "1年目〜3年目"
        profitTarget:
          type: string
          example: "200万円/年"

    CompanyRanking:
      type: object
      properties:
        id:
          type: string
        rank:
          type: integer
        companyName:
          type: string
        isAnonymous:
          type: boolean
        industry:
          type: string
        companySize:
          type: string
        foundingYear:
          type: integer
        totalScore:
          type: number
          format: float
        netWorthFormationRate:
          type: number
          format: float
        revenueGrowthRate:
          type: number
          format: float
        profitMarginImprovement:
          type: number
          format: float
        targetAchievementRate:
          type: number
          format: float

    UserRankingData:
      type: object
      properties:
        currentRank:
          type: integer
        totalParticipants:
          type: integer
        totalScore:
          type: number
          format: float
        scoreBreakdown:
          $ref: "#/components/schemas/ScoreBreakdown"
        categoryRankings:
          type: array
          items:
            $ref: "#/components/schemas/CategoryRanking"
        earnedBadges:
          type: array
          items:
            $ref: "#/components/schemas/Badge"
        recentAwards:
          type: array
          items:
            $ref: "#/components/schemas/Award"
        benchmarkData:
          $ref: "#/components/schemas/BenchmarkData"

    ScoreBreakdown:
      type: object
      properties:
        netWorthFormationRate:
          type: number
          format: float
        revenueGrowthRate:
          type: number
          format: float
        profitMarginImprovement:
          type: number
          format: float
        targetAchievementRate:
          type: number
          format: float

    CategoryRanking:
      type: object
      properties:
        category:
          type: string
        rank:
          type: integer
        totalParticipants:
          type: integer

    Badge:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: string
        rarity:
          type: string
          enum: [common, rare, epic, legendary]
        unlockedAt:
          type: string
          format: date-time

    Award:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        category:
          type: string
        period:
          type: string
        year:
          type: integer
        month:
          type: integer
        rank:
          type: integer
        companyId:
          type: string
        isAnonymous:
          type: boolean

    BenchmarkData:
      type: object
      properties:
        industry:
          type: string
        companySize:
          type: string
        averageScore:
          type: number
          format: float
        medianScore:
          type: number
          format: float
        topPercentileScore:
          type: number
          format: float
        averageRevenueGrowth:
          type: number
          format: float
        averageProfitMargin:
          type: number
          format: float
        averageNetWorthFormation:
          type: number
          format: float
        averageTargetAchievement:
          type: number
          format: float
        participantCount:
          type: integer

    UserSettings:
      type: object
      properties:
        userInfo:
          $ref: "#/components/schemas/UserInfo"
        setupData:
          $ref: "#/components/schemas/InitialSetup"
        notificationSettings:
          $ref: "#/components/schemas/NotificationSettings"
        yayoiSettings:
          $ref: "#/components/schemas/YayoiSettings"
        rankingSettings:
          $ref: "#/components/schemas/RankingSettings"

    UserInfo:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string

    NotificationSettings:
      type: object
      properties:
        email:
          type: boolean
        browser:
          type: boolean
        mobile:
          type: boolean

    YayoiSettings:
      type: object
      properties:
        connected:
          type: boolean
        apiKey:
          type: string
        autoSync:
          type: boolean
        syncFrequency:
          type: string
          enum: [hourly, daily, weekly]

    FAQ:
      type: object
      properties:
        id:
          type: string
        question:
          type: string
        answer:
          type: string
        category:
          type: string

    ConsultationRequest:
      type: object
      required:
        - date
        - time
        - topic
      properties:
        date:
          type: string
          format: date
        time:
          type: string
          example: "10:00"
        topic:
          type: string
          example: "消費税の計算方法について"
        description:
          type: string

    Consultation:
      type: object
      properties:
        id:
          type: string
        date:
          type: string
          format: date
        time:
          type: string
        advisor:
          type: string
        topic:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [scheduled, completed, cancelled]
        createdAt:
          type: string
          format: date-time

tags:
  - name: 認証
    description: ユーザー認証関連の操作
  - name: 初期設定
    description: 初期設定関連の操作
  - name: ダッシュボード
    description: ダッシュボード表示用データの操作
  - name: タスク管理
    description: 月次タスクの管理操作
  - name: 予実管理
    description: 予算と実績の管理操作
  - name: ロードマップ
    description: 長期目標とロードマップの管理操作
  - name: ランキング・表彰
    description: ランキングと表彰システムの操作
  - name: 設定
    description: ユーザー設定の管理操作
  - name: 外部連携
    description: 外部システムとの連携操作
  - name: サポート・相談
    description: サポートと相談機能の操作
  - name: KPI
    description: KPI（重要業績評価指標）の操作
